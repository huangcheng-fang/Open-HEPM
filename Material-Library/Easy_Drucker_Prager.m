%This code is automatically generated by EasyUmat.
%Before utilizing this code, users should verify its correctness.
%If this code is used for academic research or any other purpose, please provide appropriate citation or acknowledgment.
%EasyUmat is developed by Huangcheng FANG @ PolyU
%Email: valy_f@bjtu.edu.cn;huangcheng.fang@polyu.edu.hk
%Website: https://www.researchgate.net/profile/Huangcheng-Fang
%============================Input parameter===============================
%elastic_parameter: nx1 vector
%plastic_parameter: nx1 vector
%history_parameter:  nx1 vector
%list_parameter: nxm matrix
%stress: 6x1 vector,[Sx;Sy;Sz;Sxy;Syz;Szx]
%pstrain(plastic strain): 6x1 vector,[PEx;PEy;PEz;PExy;PEyz;PEzx]
%dstrain(strain increment): 6x1 vector,[dEx;dEy;dEz;dExy;dEyz;dEzx]
%==============================Output parameter============================
%Dct(Consistent tangent matrix): 6x6 matrix
%stress: 6x1 vector,[Sx;Sy;Sz;Sxy;Syz;Szx]
%pstrain(plastic strain): 6x1 vector,[PEx;PEy;PEz;PExy;PEyz;PEzx]
%history_parameter: nx1 vector
%===============================Method=====================================
%Implicit return algorithm; Backward Euler Method
%==========================================================================
%Please do not delete the above text at any time, such as using or modifying this code, or convert this code to another language
 
function [Dct, stress, pstrain, history_parameter]=Easy_Drucker_Prager(elastic_parameter, plastic_parameter, history_parameter, list_parameter, stress, pstrain, dstrain)
%======================(1) Initialize input parameters=====================
E=elastic_parameter(1); niu=elastic_parameter(2);  
fai=plastic_parameter(1); pfai=plastic_parameter(2); c=history_parameter(2);  
 

%======================(2) Update user-defined constant====================
A=tan(fai);
B=(1-tan(fai)/3)*c;
Ag=tan(pfai);
adj=0.99;

%=========================(3) Update elastic stress========================
dstrain_elas=dstrain;
[dsigma,D_elastic]=Easy_linear_elastic(E,niu,dstrain_elas);
stress_predict=stress+dsigma;

%===================(4) Update variables related to stress=================
[I1,J2,J3,Lode,sx,sxy,sy,syz,sz,szx]=calculate_stress_invariant(stress_predict);
[S1,S2,S3,s1,s2,s3]=calculate_principal_stress(I1,J2,Lode);

%=================(5) Update characteristic plastic strain=================
dPEEQ=0; dPEV=0;

%===================(6) Update user-defined stress variables===============

%===================(7) Update user-defined strain variables===============

%=======================(8) Update hardening parameters====================

%========================(9) Update yield function=========================
iternum=0; pLamda=zeros(2,1);
active_fun=[pLamda(1)>0|iternum==0;pLamda(2)>0|iternum==0];
active_num=sum(active_fun,'all');
F=zeros(2,1);
if active_fun(1); F(1)=(3^(1/2)*J2^(1/2) - B + (A*I1)/3)/B;end
if active_fun(2); F(2)=-(B*adj - (A*I1)/3)/B;end

%===========================(10) Elastic output============================
if max(F)<1e-5
  stress=stress_predict;
  Dct=D_elastic;
  return;
end

%==========================(11) Plastic calculation========================
iternum=1;tol=1e-6;
HPara=[];

while true
%(12) Calculate derivatives of yield and potential functions
k11=zeros(6,6);k12=[];k21=[];dpstrain=zeros(6,1);
if active_fun(1)
  [dFdS,dFdH]=calculate_F1_derivative(A, B, J2, sx, sxy, sy, syz, sz, szx);
  [dGdS,ddGddS,ddGdSdH]=calculate_G1_derivative(Ag, J2, sx, sxy, sy, syz, sz, szx);
  dpstrain=dpstrain+pLamda(1)*dGdS;
  k11=k11+pLamda(1)*ddGddS;
  k12=[k12,dGdS];
  k21=[k21;dFdS.'];
end

if active_fun(2)
  [dFdS,dFdH]=calculate_F2_derivative(A, B, sx, sxy, sy, syz, sz, szx);
  [dGdS,ddGddS,ddGdSdH]=calculate_G2_derivative(A, sx, sxy, sy, syz, sz, szx);
  dpstrain=dpstrain+pLamda(2)*dGdS;
  k11=k11+pLamda(2)*ddGddS;
  k12=[k12,dGdS];
  k21=[k21;dFdS.'];
end

%(13) Update characteristic plastic strain
  dPEEQ=calculate_equivalent_strain(dpstrain);
  dPEV=dpstrain(1)+dpstrain(2)+dpstrain(3);

%(14) Update user-defined strain variables

%(15) Calculate derivatives of hardening functions


%(16) Update stress increment
  dstrain_elas=dstrain-dpstrain;
  [dsigma_corrected,D_elastic]=Easy_linear_elastic(E,niu,dstrain_elas);

%(17) Calculate residuals
  sigma_res=dsigma_corrected-dsigma;
  F_res=-F(active_fun);
  HPara_res=[];


%(18) Calculate tangent matrix
  Ktang=[eye(6)+D_elastic*k11, D_elastic*k12; k21*D_elastic(1),  zeros(active_num)];

%(19) Convergence criterion
  if norm(F_res)<tol&&norm(sigma_res)/norm(dsigma)<tol; break;end

%(20) Update variables
  x=Ktang\[sigma_res;F_res*D_elastic(1);HPara_res*D_elastic(1)];
  dsigma=dsigma+x(1:6);
  pLamda(active_fun)=pLamda(active_fun)+x(7:6+active_num);
  HPara=HPara+x(7+active_num:end);
  stress_predict=stress+dsigma;

%(21) Update variables related to stress
  [I1,J2,J3,Lode,sx,sxy,sy,syz,sz,szx]=calculate_stress_invariant(stress_predict);
  [S1,S2,S3,s1,s2,s3]=calculate_principal_stress(I1,J2,Lode);


%(22) Update user-defined stress variables

%(23) Update yield function
  if active_fun(1); F(1)=(3^(1/2)*J2^(1/2) - B + (A*I1)/3)/B;end
  if active_fun(2); F(2)=-(B*adj - (A*I1)/3)/B;end
  active_fun0=active_fun;

  active_fun=[pLamda(1)>0|iternum==0;pLamda(2)>0|iternum==0];
  active_change=(active_fun==active_fun0)&active_fun;
  active_num=sum(active_fun,'all');

  if active_change(1); F(1)=(3^(1/2)*J2^(1/2) - B + (A*I1)/3)/B;end
  if active_change(2); F(2)=-(B*adj - (A*I1)/3)/B;end
  F(~active_fun)=0;
  pLamda(~active_fun)=-1e-32;


%(24) Count
  if iternum>100
    error('Material nonlinear iteration cannot converge in Easy_UMat')
  end
  iternum=iternum+1;
end

%===========================(25) Plastic output============================
stress=stress+dsigma;
pstrain=pstrain+dpstrain;
Dct=Ktang\[D_elastic;zeros(active_num+0,6)];
Dct=Dct(1:6,1:6);
end

function [dsigmar,D_elastic]=Easy_linear_elastic(E,niu,dstrain)
LAM=E/(1+niu);
a=(1-niu)/(1-2*niu)*LAM;
b=niu/(1-2*niu)*LAM;
c=0.5*LAM;
D_elastic=[a, b, b, 0, 0, 0;
b, a, b, 0, 0, 0;
b, b, a, 0, 0, 0;
0, 0, 0, c, 0, 0;
0, 0, 0, 0, c, 0;
0, 0, 0, 0, 0, c;];
dsigmar=D_elastic*dstrain;
end

function [I1,J2,J3,Lode,sx,sxy,sy,syz,sz,szx]=calculate_stress_invariant(stress)
Sx=stress(1); Sy=stress(2); Sz=stress(3);
Sxy=stress(4); Syz=stress(5); Szx=stress(6);
I1=Sx+Sy+Sz; Sm=I1/3;
sx=Sx-Sm; sy=Sy-Sm; sz=Sz-Sm; sxy=Sxy; syz=Syz; szx=Szx;
J2=0.5*(sx.^2+sy.^2+sz.^2)+sxy.^2+syz.^2+szx.^2;
J3=sx*sy*sz+2*sxy*syz*szx-sx*syz.^2-sy*szx.^2-sz*sxy.^2;
if J2<1e-10; J2=1e-10;end
temp=-1.5*sqrt(3.0)*J3/J2^1.5;temp=sign(temp)*min(abs(temp),1.0);Lode=asin(temp)/3.0;
end


function [S1,S2,S3,s1,s2,s3]=calculate_principal_stress(I1,J2,Lode)
sm=I1/3;
s1=2*sqrt(J2)/sqrt(3)*sin(Lode+2*pi/3);
s2=2*sqrt(J2)/sqrt(3)*sin(Lode);
s3=2*sqrt(J2)/sqrt(3)*sin(Lode-2*pi/3);
S1=s1+sm;
S2=s2+sm;
S3=s3+sm;
end


function [dFdS,dFdH]=calculate_F1_derivative(A, B, J2, sx, sxy, sy, syz, sz, szx)
dXFdS=[1, sx;
       1, sy;
       1, sz;
       0, 2*sxy;
       0, 2*syz;
       0, 2*szx];
dFdX=[A/(3*B);
      3^(1/2)/(2*B*J2^(1/2))];
dFdS=dXFdS*dFdX;
dFdH=[];
end

function [dFdS,dFdH]=calculate_F2_derivative(A, B, sx, sxy, sy, syz, sz, szx)
dXFdS=[1, sx;
       1, sy;
       1, sz;
       0, 2*sxy;
       0, 2*syz;
       0, 2*szx];
dFdX=[A/(3*B);
      0];
dFdS=dXFdS*dFdX;
dFdH=[];
end


function [dGdS,ddGddS,ddGdSdH]=calculate_G1_derivative(Ag, J2, sx, sxy, sy, syz, sz, szx)
dXGdS=[1, sx;
       1, sy;
       1, sz;
       0, 2*sxy;
       0, 2*syz;
       0, 2*szx];
dGdX=[Ag/3;
      3^(1/2)/(2*J2^(1/2))];
ddGdXdH=[];
dGdS=dXGdS*dGdX;

ddGddX=[0, 0;
        0, -3^(1/2)/(4*J2^(3/2))];
ddXGddS2=[2/3, -1/3, -1/3, 0, 0, 0;
         -1/3, 2/3, -1/3, 0, 0, 0;
         -1/3, -1/3, 2/3, 0, 0, 0;
         0, 0, 0, 2, 0, 0;
         0, 0, 0, 0, 2, 0;
         0, 0, 0, 0, 0, 2];
ddGddS=dXGdS*ddGddX*dXGdS.'+ddXGddS2*dGdX(2);
ddGdSdH=[];
end

function [dGdS,ddGddS,ddGdSdH]=calculate_G2_derivative(A, sx, sxy, sy, syz, sz, szx)
dXGdS=[1, sx;
       1, sy;
       1, sz;
       0, 2*sxy;
       0, 2*syz;
       0, 2*szx];
dGdX=[A/3;
      0];
ddGdXdH=[];
dGdS=dXGdS*dGdX;

ddGddX=[0, 0;
        0, 0];
ddXGddS2=[2/3, -1/3, -1/3, 0, 0, 0;
         -1/3, 2/3, -1/3, 0, 0, 0;
         -1/3, -1/3, 2/3, 0, 0, 0;
         0, 0, 0, 2, 0, 0;
         0, 0, 0, 0, 2, 0;
         0, 0, 0, 0, 0, 2];
ddGddS=dXGdS*ddGddX*dXGdS.'+ddXGddS2*dGdX(2);
ddGdSdH=[];
end

function strain_eq=calculate_equivalent_strain(strain)
strain_eq=(strain(1)-strain(2)).^2+(strain(2)-strain(3)).^2+(strain(3)-strain(1)).^2+(strain(4).^2+strain(5).^2+strain(6).^2)*1.5;
strain_eq=sqrt(2/9*strain_eq);
end

